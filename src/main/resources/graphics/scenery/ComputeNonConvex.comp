uniform vec2 viewportSize;
uniform vec2 dsp;
uniform float fwnw;
uniform float nw;

uniform sampler3D volumeCache;

// -- comes from CacheSpec -----
uniform vec3 blockSize;
uniform vec3 paddedBlockSize;
uniform vec3 cachePadOffset;

// -- comes from TextureCache --
uniform vec3 cacheSize; // TODO: get from texture!?
uniform mat4 transform;

#pragma scenery verbatim
layout(set = 0, binding = 0) uniform VRParameters {
    mat4 projectionMatrices[2];
    mat4 inverseProjectionMatrices[2];
    mat4 headShift;
    float IPD;
    int stereoEnabled;
} vrParameters;

const int MAX_NUM_LIGHTS = 1024;

layout(set = 1, binding = 0) uniform LightParameters {
    mat4 ViewMatrices[2];
    mat4 InverseViewMatrices[2];
    mat4 ProjectionMatrix;
    mat4 InverseProjectionMatrix;
    vec3 CamPosition;
};

layout(push_constant) uniform currentEye_t {
    int eye;
} currentEye;

#define USE_PRINTF 1

#if USE_PRINTF
#extension GL_EXT_debug_printf : enable
#endif

layout(local_size_x = 16, local_size_y = 16) in;
layout(set = 2, binding = 0, rgba8) uniform image3D LayeredColors;
layout(set = 3, binding = 0, r32f) uniform image3D LayeredDepths;

#pragma scenery endverbatim

// intersect ray with a box
// http://www.siggraph.org/education/materials/HyperGraph/raytrace/rtinter3.htm
void intersectBox( vec3 r_o, vec3 r_d, vec3 boxmin, vec3 boxmax, out float tnear, out float tfar )
{
    // compute intersection of ray with all six bbox planes
    vec3 invR = 1 / r_d;
    vec3 tbot = invR * ( boxmin - r_o );
    vec3 ttop = invR * ( boxmax - r_o );

    // re-order intersections to find smallest and largest on each axis
    vec3 tmin = min(ttop, tbot);
    vec3 tmax = max(ttop, tbot);

    // find the largest tmin and the smallest tmax
    tnear = max( max( tmin.x, tmin.y ), max( tmin.x, tmin.z ) );
    tfar = min( min( tmax.x, tmax.y ), min( tmax.x, tmax.z ) );
}

float adjustOpacity(float a, float modifiedStepLength) {
	return 1.0 - pow((1.0 - a), modifiedStepLength);
}

uniform bool fixedStepSize;
uniform float stepsPerVoxel;

#define NUM_LAYERS 2

// ---------------------
// $insert{Convert}
// $insert{SampleVolume}
// ---------------------

void main()
{
    bool fixedStepSizeLocal = true;
    float stepsPerVoxelLocal = 1.0f;

    bool debug_pixel = false;
    if(gl_GlobalInvocationID.xy == ivec2(760, 510)) {
        debug_pixel = true;
    }

    mat4 ipv = InverseViewMatrices[0] * InverseProjectionMatrix;
    // frag coord in NDC
    // TODO: Re-introduce dithering
    //	vec2 fragCoord = (vrParameters.stereoEnabled ^ 1) * gl_FragCoord.xy + vrParameters.stereoEnabled * vec2((gl_FragCoord.x/2.0 + currentEye.eye * gl_FragCoord.x/2.0), gl_FragCoord.y);
    //	vec2 viewportSizeActual = (vrParameters.stereoEnabled ^ 1) * viewportSize + vrParameters.stereoEnabled * vec2(viewportSize.x/2.0, viewportSize.y);
    //	vec2 uv = 2 * ( gl_FragCoord.xy + dsp ) / viewportSizeActual - 1;
    vec2 texcoord = gl_GlobalInvocationID.xy/vec2(1280, 720);
    vec2 uv = texcoord * 2.0 - vec2(1.0);
    vec2 depthUV = (vrParameters.stereoEnabled ^ 1) * texcoord + vrParameters.stereoEnabled * vec2((texcoord.x/2.0 + currentEye.eye * 0.5), texcoord.y);
    depthUV = depthUV * 2.0 - vec2(1.0);

    vec4 FragColor = vec4(0.0);

    // NDC of frag on near and far plane
    vec4 front = vec4( uv, -1, 1 );
    vec4 back = vec4( uv, 1, 1 );

    // calculate eye ray in world space
    vec4 wfront = ipv * front;
    wfront *= 1 / wfront.w;
    vec4 wback = ipv * back;
    wback *= 1 / wback.w;

    // -- bounding box intersection for all volumes ----------
    float tnear = 1, tfar = 0, tmax = getMaxDepth( depthUV );
    float n, f;

    float domain_end_points[NUM_LAYERS];
    int index = 0;

    // $repeat:{vis,localNear,localFar,intersectBoundingBox|
    bool vis = false;
    float localNear = 0.0f;
    float localFar = 0.0f;
    intersectBoundingBox( wfront, wback, n, f );
    f = min( tmax, f );

    if ( n < f )
    {
        domain_end_points[index] = f;
        index++;
        localNear = n;
        localFar = f;
        tnear = min( tnear, max( 0, n ) );
        tfar = max( tfar, f );
        vis = true;
    }
    // }$

    // -------------------------------------------------------

    int num_domains = index;

    for (int i = num_domains; i < NUM_LAYERS; i++) {
        domain_end_points[i] = 100.f; // set to a large (infinite) value
    }

    // Sort the domain_end_points array
    for (int i = 0; i < NUM_LAYERS - 1; i++) {
        for (int j = 0; j < NUM_LAYERS - i - 1; j++) {
            if (domain_end_points[j] > domain_end_points[j + 1]) {
                float temp = domain_end_points[j];
                domain_end_points[j] = domain_end_points[j + 1];
                domain_end_points[j + 1] = temp;
            }
        }
    }

    index = 0;

    #if USE_PRINTF
    if(debug_pixel) {
        debugPrintfEXT("Total domains: %d", num_domains);
        debugPrintfEXT("Domain 0 ends: %f", domain_end_points[0]);
        debugPrintfEXT("Domain 1 ends: %f", domain_end_points[1]);
    }
    #endif

    vec4 colors[NUM_LAYERS];
    float depths[NUM_LAYERS];

    if ( tnear < tfar )
    {

        #if USE_PRINTF
        if(debug_pixel) {
            debugPrintfEXT("tnear is less than tfar");
        }
        #endif
        vec4 fb = wback - wfront;
        int numSteps =
        ( fwnw > 0.00001 )
        ? int ( log( ( tfar * fwnw + nw ) / ( tnear * fwnw + nw ) ) / log ( 1 + fwnw ) )
        : int ( trunc( ( tfar - tnear ) / nw + 1 ) );

		float stepWidth = nw;

		if(fixedStepSizeLocal) {
			stepWidth = (2*nw) / stepsPerVoxelLocal;
			numSteps = int ( trunc( ( tfar - tnear ) / stepWidth + 1 ) );
		}

        float step = tnear;
        vec4 w_entry = mix(wfront, wback, step);

        float standardStepSize = distance(mix(wfront, wback, step + nw), w_entry);

		float step_prev = step - stepWidth;
		vec4 wprev = mix(wfront, wback, step_prev);
        vec4 v = vec4( 0 );
		for ( int i = 0; i < numSteps; ++i)
        {
            if(i % 100 == 0) {
                #if USE_PRINTF
                if(debug_pixel) {
                    debugPrintfEXT("Step number: %d, numSteps: %d, step: %f", i, numSteps, step);
                    debugPrintfEXT("Current color: (%f, %f, %f, %f)", v.rgba);
                }
                #endif
            }

            vec4 wpos = mix( wfront, wback, step );

            // $insert{Accumulate}
            /*
            inserts something like the following (keys: vis,localNear,localFar,blockTexture,convert)

            if (vis)
            {
                float x = blockTexture(wpos, volumeCache, cacheSize, blockSize, paddedBlockSize, cachePadOffset);
                v = max(v, convert(x));
            }
            */
            wprev = wpos;

            if(fixedStepSizeLocal) {
                step += stepWidth;
            } else {
                step += nw + step * fwnw;
            }

            if (step > domain_end_points[index] || i == (numSteps - 1) || v.a >= 0.99) {
                //the step is larger than the current domain end point, or it is the last step, so we need to stop

//                v.xyz = pow(v.xyz, vec3(1/2.2));
                v.rgb *= v.a;
                colors[index] = v;
                depths[index] = step;

                #if USE_PRINTF
                if(debug_pixel) {
                    debugPrintfEXT("Step: %f is beyond domain boundary of %d", step, index);
                    debugPrintfEXT("layer has been assigned color: (%f, %f, %f, %f) and depth %f", v.rgba, step);
                }
                #endif

                v = vec4(0);
                index++;
            }
        }

        for (int i = num_domains; i < NUM_LAYERS; i++) {
            colors[i] = vec4(0);
            depths[i] = 0;
        }

    } else {
        for (int i = 0; i < NUM_LAYERS; i++) {
            colors[i] = vec4(0);
            depths[i] = 0;
        }
    }

    for (int i = 0; i < NUM_LAYERS; i++) {

        if(debug_pixel) {
            debugPrintfEXT("Storing color value: (%f, %f, %f, %f) and depth %f", colors[i].rgba, depths[i]);
            debugPrintfEXT("Storing to layer %d, width: %d, height: %d", i, gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
        }


        imageStore(LayeredColors, ivec3(i, gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), colors[i]);
        imageStore(LayeredDepths, ivec3(i, gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), vec4(depths[i]));
    }
}
